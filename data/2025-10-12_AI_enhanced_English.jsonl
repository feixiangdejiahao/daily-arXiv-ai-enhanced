{"id": "2510.07582", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.07582", "abs": "https://arxiv.org/abs/2510.07582", "authors": ["Yuyan Bao", "Tiark Rompf"], "title": "Type, Ability, and Effect Systems: Perspectives on Purity, Semantics, and Expressiveness", "comment": null, "summary": "Programming benefits from a clear separation between pure, mathematical\ncomputation and impure, effectful interaction with the world. Existing\napproaches to enforce this separation include monads, type-and-effect systems,\nand capability systems. All share a tension between precision and usability,\nand each one has non-obvious strengths and weaknesses.\n  This paper aims to raise the bar in assessing such systems. First, we propose\na semantic definition of purity, inspired by contextual equivalence, as a\nbaseline independent of any specific typing discipline. Second, we propose that\nexpressiveness should be measured by the degree of completeness, i.e., how many\nsemantically pure terms can be typed as pure. Using this measure, we focus on\nminimal meaningful effect and capability systems and show that they are\nincomparable, i.e., neither subsumes the other in terms of expressiveness.\n  Based on this result, we propose a synthesis and show that type, ability, and\neffect systems combine their respective strengths while avoiding their\nweaknesses. As part of our formal model, we provide a logical relation to\nfacilitate proofs of purity and other properties for a variety of effect typing\ndisciplines.", "AI": {"tldr": "This paper redefines purity and expressiveness for programming languages, showing that effect and capability systems are not dominant over one another. It proposes a combined type/effect/ability approach for better expressiveness and formalizes these ideas with a logical relation to aid proofs.", "motivation": "Programming languages aim to separate pure computation from effectful interactions for clarity and reliability. Existing approaches (monads, type-and-effect systems, capability systems) struggle to balance precision and usability, and their comparative strengths and weaknesses are not fully understood.", "method": "The paper proposes a semantic definition of purity using contextual equivalence, independent of any specific typing system. It introduces the idea of measuring expressiveness by the completeness with which pure terms are typed as pure. The authors analyze minimal effect and capability systems and their ability to type pure terms.", "result": "The study finds that minimal effect and capability systems are incomparable; neither can fully subsume the expressiveness of the other. The authors propose a synthesis approach that combines type, ability, and effect systems to overcome individual weaknesses, supported by a formal model with logical relations for purity proofs.", "conclusion": "No single existing approach completely covers the requirements for precise and usable separation of pure and effectful computation. A hybrid system combining aspects of type, ability, and effect systems is more robust. The proposed semantic purity definition and completeness measure provide new benchmarks for future research."}}
{"id": "2510.07851", "categories": ["cs.PL", "cs.LO"], "pdf": "https://arxiv.org/pdf/2510.07851", "abs": "https://arxiv.org/abs/2510.07851", "authors": ["Willem Heijltjes"], "title": "The Functional Machine Calculus III: Control", "comment": null, "summary": "The Functional Machine Calculus (Heijltjes 2022) is a new approach to\nunifying the imperative and functional programming paradigms. It extends the\nlambda-calculus, preserving the key features of confluent reduction and typed\ntermination, to embed computational effects, evaluation strategies, and control\nflow operations. The first instalment modelled sequential higher-order\ncomputation with global store, input/output, probabilities, and\nnon-determinism, and embedded both the call-by-name and call-by-value\nlambda-calculus, as well as Moggi's computational metalanguage and Levy's\ncall-by-push-value. The present paper extends the calculus from sequential to\nbranching and looping control flow. This allows the faithful embedding of a\nminimal but complete imperative language, including conditionals, exception\nhandling, and iteration, as well as constants and algebraic data types.\n  The calculus is defined through a simple operational semantics, extending the\n(simplified) Krivine machine for the lambda-calculus with multiple operand\nstacks to model effects and a continuation stack to model sequential,\nbranching, and looping computation. It features a confluent reduction relation\nand a system of simple types that guarantees termination of the machine and\nstrong normalization of reduction (in the absence of iteration). These\nproperties carry over to the embedded imperative language, providing a unified\nfunctional-imperative model of computation that supports simple types, a direct\nand intuitive operational semantics, and a confluent reduction semantics.", "AI": {"tldr": "This paper presents an extension of the Functional Machine Calculus, allowing it to naturally embed imperative programming features (like loops, conditionals, exceptions) into the lambda calculus while preserving key properties such as typed termination and confluent reduction. Thus, it unifies functional and imperative paradigms operationally and semantically.", "motivation": "Traditional lambda calculus and functional programming do not model imperative constructs like conditionals, loops, and exception handling naturally. Previous work presented a method of embedding computational effects and evaluation strategies, but lacked branching and looping control flow.", "method": "The paper extends the Functional Machine Calculus by modifying operational semantics: it leverages an enhanced Krivine machine with multiple operand stacks for effects and a continuation stack for managing sequential, branching, and looping control flow. It introduces simple types to ensure strong normalization and termination (except for iteration).", "result": "The extended calculus can faithfully embed a minimal but complete imperative language, including conditionals, exception handling, iteration, constants, and algebraic data types, while preserving typed termination and confluent reduction properties.", "conclusion": "The Functional Machine Calculus provides a unified framework for functional and imperative programming models, supporting both computation paradigms via simple types, intuitive operational semantics, and confluent reduction."}}
{"id": "2510.07435", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2510.07435", "abs": "https://arxiv.org/abs/2510.07435", "authors": ["Zixuan Feng", "Sadia Afroz", "Anita Sarma"], "title": "Modeling Developer Burnout with GenAI Adoption", "comment": "10 pages, LLM", "summary": "Generative AI (GenAI) is rapidly reshaping software development workflows.\nWhile prior studies emphasize productivity gains, the adoption of GenAI also\nintroduces new pressures that may harm developers' well-being. In this paper,\nwe investigate the relationship between the adoption of GenAI and developers'\nburnout. We utilized the Job Demands--Resources (JD--R) model as the analytic\nlens in our empirical study. We employed a concurrent embedded mixed-methods\nresearch design, integrating quantitative and qualitative evidence. We first\nsurveyed 442 developers across diverse organizations, roles, and levels of\nexperience. We then employed Partial Least Squares--Structural Equation\nModeling (PLS-SEM) and regression to model the relationships among job demands,\njob resources, and burnout, complemented by a qualitative analysis of\nopen-ended responses to contextualize the quantitative findings. Our results\nshow that GenAI adoption heightens burnout by increasing job demands, while job\nresources and positive perceptions of GenAI mitigate these effects, reframing\nadoption as an opportunity.", "AI": {"tldr": "GenAI's adoption in software development may worsen developer burnout through increased job demands, but supportive work environments and positive outlooks on GenAI can help alleviate these risks.", "motivation": "While GenAI can boost productivity, there are concerns it may negatively impact developers' well-being by increasing pressure and burnout.", "method": "A concurrent embedded mixed-methods research design combining quantitative (survey of 442 developers, PLS-SEM and regression modeling) and qualitative (open-ended responses) approaches.", "result": "The study finds that the adoption of GenAI intensifies burnout due to increased job demands. Nonetheless, job resources and favorable attitudes toward GenAI help to offset these negative outcomes.", "conclusion": "GenAI adoption increases developer burnout by raising job demands; however, strong job resources and positive perceptions of GenAI can help mitigate this effect."}}
{"id": "2510.07529", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07529", "abs": "https://arxiv.org/abs/2510.07529", "authors": ["Carol Hanna", "Federica Sarro", "Mark Harman", "Justyna Petke"], "title": "HotBugs.jar: A Benchmark of Hot Fixes for Time-Critical Bugs", "comment": null, "summary": "Hot fixes are urgent, unplanned changes deployed to production systems to\naddress time-critical issues. Despite their importance, no existing evaluation\nbenchmark focuses specifically on hot fixes. We present HotBugs$.$jar, the\nfirst dataset dedicated to real-world hot fixes. From an initial mining of 10\nactive Apache projects totaling over 190K commits and 150K issue reports, we\nidentified 746 software patches that met our hot-fix criteria. After manual\nevaluation, 679 were confirmed as genuine hot fixes, of which 110 are\nreproducible using a test suite. Building upon the Bugs$.$jar framework,\nHotBugs$.$jar integrates these 110 reproducible cases and makes available all\n679 manually validated hot fixes, each enriched with comprehensive metadata to\nsupport future research. Each hot fix was systematically identified using Jira\nissue data, validated by independent reviewers, and packaged in a reproducible\nformat with buggy and fixed versions, test suites, and metadata. HotBugs$.$jar\nhas already been adopted as the official challenge dataset for the Search-Based\nSoftware Engineering (SBSE) Conference Challenge Track, demonstrating its\nimmediate impact. This benchmark enables the study and evaluation of tools for\nrapid debugging, automated repair, and production-grade resilience in modern\nsoftware systems to drive research in this essential area forward.", "AI": {"tldr": "The paper introduces HotBugs.jar, the first benchmark dataset focused on urgent real-world hot fixes in software. It compiles 679 validated hot fixes, with 110 reproducible cases, to support research on rapid debugging and automated repair. Its adoption by a major conference confirms its impact.", "motivation": "Hot fixes are urgent and critical in software maintenance, but there lacks a specialized benchmark for their evaluation, making it difficult to study and improve related tools and techniques.", "method": "The authors mined 10 active Apache projects for over 190,000 commits and 150,000 issue reports. They identified software patches that met hot-fix criteria, performed manual evaluation to validate real hot fixes, and systematically processed the data using Jira issue records. They then prepared a reproducible dataset with buggy/fixed code, test suites, and metadata.", "result": "They produced HotBugs.jar: 679 manually validated hot fixes (from 746 candidates), with 110 reproducible cases packaged for research use. The dataset includes comprehensive metadata and reproducibility for each case.", "conclusion": "HotBugs.jar is the first dedicated real-world hot fixes benchmark. It facilitates evaluation and improvement of debugging, automated repair, and resilience tools. Its adoption by the SBSE Conference Challenge Track confirms its immediate relevance and impact."}}
{"id": "2510.07604", "categories": ["cs.SE", "D.2.4"], "pdf": "https://arxiv.org/pdf/2510.07604", "abs": "https://arxiv.org/abs/2510.07604", "authors": ["Yubo Bai", "Tapti Palit"], "title": "RustAssure: Differential Symbolic Testing for LLM-Transpiled C-to-Rust Code", "comment": "13 pages to appear in Proceedings of ASE 2025", "summary": "Rust is a memory-safe programming language that significantly improves\nsoftware security. Existing codebases written in unsafe memory languages, such\nas C, must first be transpiled to Rust to take advantage of Rust's improved\nsafety guarantees. RustAssure presents a system that uses Large Language Models\n(LLMs) to automatically transpile existing C codebases to Rust. RustAssure uses\nprompt engineering techniques to maximize the chances of the LLM generating\nidiomatic and safe Rust code. Moreover, because LLMs often generate code with\nsubtle bugs that can be missed under traditional unit or fuzz testing,\nRustAssure performs differential symbolic testing to establish the semantic\nsimilarity between the original C and LLM-transpiled Rust code. We evaluated\nRustAssure with five real-world applications and libraries, and showed that our\nsystem is able to generate compilable Rust functions for 89.8% of all C\nfunctions, of which 69.9% produced equivalent symbolic return values for both\nthe C and Rust functions.", "AI": {"tldr": "RustAssure uses LLMs and prompt engineering to automatically transpile C code to Rust, achieving high rates of compilable and semantically equivalent results, thus supporting secure migration from C to Rust.", "motivation": "There is a significant need to improve software security by transitioning codebases from memory-unsafe languages like C to safer languages like Rust. Manual rewriting or traditional transpilation is laborious and error-prone, motivating an automated approach.", "method": "The paper introduces RustAssure, a system that leverages Large Language Models (LLMs) with customized prompt engineering to transpile C codebases to idiomatic and safe Rust. In addition, it applies differential symbolic testing to compare semantic equivalence between the original C and transpiled Rust code.", "result": "RustAssure successfully generated compilable Rust code for 89.8% of C functions across five evaluated real-world projects. 69.9% of those Rust functions were also proven to produce equivalent symbolic return values as their original C counterparts.", "conclusion": "RustAssure demonstrates that LLM-based transpilation from C to Rust is feasible and effective in producing a high rate of correct and semantically equivalent Rust code. Its prompt engineering and semantic testing components significantly enhance the reliability and security of the automated transpilation process."}}
{"id": "2510.07740", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.07740", "abs": "https://arxiv.org/abs/2510.07740", "authors": ["Dezhi Ran", "Yuan Cao", "Mengzhou Wu", "Simin Chen", "Yuzhe Guo", "Jun Ren", "Zihe Song", "Hao Yu", "Jialei Wei", "Linyi Li", "Wei Yang", "Baishakhi Ray", "Tao Xie"], "title": "AppForge: From Assistant to Independent Developer -- Are GPTs Ready for Software Development?", "comment": "Under Review. Benchmark and leadboards at\n  https://appforge-bench.github.io/", "summary": "Large language models (LLMs) have demonstrated remarkable capability in\nfunction-level code generation tasks. Unlike isolated functions, real-world\napplications demand reasoning over the entire software system: developers must\norchestrate how different components interact, maintain consistency across\nstates over time, and ensure the application behaves correctly within the\nlifecycle and framework constraints. Yet, no existing benchmark adequately\nevaluates whether LLMs can bridge this gap and construct entire software\nsystems from scratch. To address this gap, we propose APPFORGE, a benchmark\nconsisting of 101 software development problems drawn from real-world Android\napps. Given a natural language specification detailing the app functionality, a\nlanguage model is tasked with implementing the functionality into an Android\napp from scratch. Developing an Android app from scratch requires understanding\nand coordinating app states, lifecycle management, and asynchronous operations,\ncalling for LLMs to generate context-aware, robust, and maintainable code. To\nconstruct APPFORGE, we design a multi-agent system to automatically summarize\nthe main functionalities from app documents and navigate the app to synthesize\ntest cases validating the functional correctness of app implementation.\nFollowing rigorous manual verification by Android development experts, APPFORGE\nincorporates the test cases within an automated evaluation framework that\nenables reproducible assessment without human intervention, making it easily\nadoptable for future research. Our evaluation on 12 flagship LLMs show that all\nevaluated models achieve low effectiveness, with the best-performing model\n(GPT-5) developing only 18.8% functionally correct applications, highlighting\nfundamental limitations in current models' ability to handle complex,\nmulti-component software engineering challenges.", "AI": {"tldr": "APPFORGE presents a rigorous new benchmark for evaluating LLMs on real-world, whole-app development tasks, showing current models struggle badly with multi-component software engineering challenges.", "motivation": "Existing benchmarks only evaluate LLMs on isolated function-level code generation, which does not reflect the complexity of real-world software engineering tasks. There is a need to assess whether LLMs can orchestrate complete software systems, not just isolated components.", "method": "The authors developed APPFORGE, a benchmark of 101 real-world Android app development problems. They used a multi-agent system to extract app functionalities, synthesize test cases, and constructed an automated evaluation framework for reproducibility. Manual expert verification was employed for rigor.", "result": "Out of 12 major LLMs tested (including GPT-5), even the highest-performing model achieved only 18.8% functionally correct app implementations, revealing significant gaps in current LLM technology for full-system software engineering.", "conclusion": "Current large language models are fundamentally limited in their ability to generate entire, functionally correct software systems from scratch, especially for complex and real-world applications such as Android apps."}}
{"id": "2510.07815", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07815", "abs": "https://arxiv.org/abs/2510.07815", "authors": ["Zeyu Sun", "Jingjing Liang", "Weiyi Wang", "Chenyao Suo", "Junjie Chen", "Fanjiang Xu"], "title": "Interleaved Learning and Exploration: A Self-Adaptive Fuzz Testing Framework for MLIR", "comment": null, "summary": "MLIR (Multi-Level Intermediate Representation) has rapidly become a\nfoundational technology for modern compiler frameworks, enabling extensibility\nacross diverse domains. However, ensuring the correctness and robustness of\nMLIR itself remains challenging. Existing fuzzing approaches-based on manually\ncrafted templates or rule-based mutations-struggle to generate sufficiently\ndiverse and semantically valid test cases, making it difficult to expose subtle\nor deep-seated bugs within MLIR's complex and evolving code space. In this\npaper, we present FLEX, a novel self-adaptive fuzzing framework for MLIR. FLEX\nleverages neural networks for program generation, a perturbed sampling strategy\nto encourage diversity, and a feedback-driven augmentation loop that\niteratively improves its model using both crashing and non-crashing test cases.\nStarting from a limited seed corpus, FLEX progressively learns valid syntax and\nsemantics and autonomously produces high-quality test inputs. We evaluate FLEX\non the upstream MLIR compiler against four state-of-the-art fuzzers. In a\n30-day campaign, FLEX discovers 80 previously unknown bugs-including multiple\nnew root causes and parser bugs-while in 24-hour fixed-revision comparisons, it\ndetects 53 bugs (over 3.5x as many as the best baseline) and achieves 28.2%\ncode coverage, outperforming the next-best tool by 42%. Ablation studies\nfurther confirm the critical role of both perturbed generation and diversity\naugmentation in FLEX's effectiveness.", "AI": {"tldr": "FLEX is a novel neural network-based fuzzing tool for MLIR that greatly improves bug detection and code coverage compared to existing fuzzers, thanks to adaptive learning and diversity-focused strategies.", "motivation": "MLIR is widely used in modern compiler frameworks, but verifying its correctness is difficult due to the lack of effective, diverse, and semantically valid test case generation tools. Existing fuzzing methods do not adequately expose deep or subtle bugs.", "method": "The paper introduces FLEX, a self-adaptive fuzzing framework for MLIR. FLEX uses neural networks for generating programs, employs a perturbed sampling strategy to boost diversity, and integrates a feedback-based augmentation loop that iteratively refines its model based on all test outcomes.", "result": "FLEX was evaluated against four state-of-the-art fuzzers on the MLIR compiler. Over 30 days, it uncovered 80 previously unknown bugs (including new parser and root cause bugs). In 24-hour tests, FLEX found 53 bugs (over 3.5 times more than the best alternative) and achieved 28.2% code coverage, outperforming the next-best tool by 42%.", "conclusion": "FLEX significantly advances MLIR fuzzing by improving bug discovery and code coverage through adaptive learning, perturbed generation, and diversity augmentation. Both the novel generation and feedback techniques are crucial to its superior performance."}}
{"id": "2510.07834", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07834", "abs": "https://arxiv.org/abs/2510.07834", "authors": ["Lingjun Liu", "Feiran Qin", "Owolabi Legunsen", "Marcelo d'Amorim"], "title": "Bug Histories as Sources of Compiler Fuzzing Mutators", "comment": null, "summary": "Bugs in compilers, which are critical infrastructure today, can have outsized\nnegative impacts. Mutational fuzzers aid compiler bug detection by\nsystematically mutating compiler inputs, i.e., programs. Their effectiveness\ndepends on the quality of the mutators used. Yet, no prior work used compiler\nbug histories as a source of mutators. We propose IssueMut, the first approach\nfor extracting compiler fuzzing mutators from bug histories. Our insight is\nthat bug reports contain hints about program elements that induced compiler\nbugs; they can guide fuzzers towards similar bugs. IssueMut uses an automated\nmethod to mine mutators from bug reports and retrofit such mutators into\nexisting mutational compiler fuzzers. Using IssueMut, we mine 587 mutators from\n1760 GCC and LLVM bug reports. Then, we run IssueMut on these compilers, with\nall their test inputs as seed corpora. We find that \"bug history\" mutators are\neffective: they find new bugs that a state-of-the-art mutational compiler\nfuzzer misses-28 in GCC and 37 in LLVM. Of these, 60 were confirmed or fixed,\nvalidating our idea that bug histories have rich information that compiler\nfuzzers should leverage.", "AI": {"tldr": "The paper presents IssueMut, a system that mines mutators from compiler bug reports to improve fuzzing. It significantly enhances compiler bug finding by uncovering bugs missed by traditional fuzzers and underscores the value of bug history exploitation.", "motivation": "Compiler bugs are highly impactful, and existing mutational fuzzers may miss bugs due to limited mutator diversity. Bug reports offer insights into triggering elements of past bugs, which can help guide fuzzers to uncover similar issues.", "method": "The authors developed IssueMut, an automated approach to extract mutators from compiler bug reports and integrate them into existing fuzzers. They mined 587 mutators from 1760 bug reports in GCC and LLVM compilers and assessed their impact on bug discovery.", "result": "IssueMut-derived mutators enabled the discovery of new bugs that existing state-of-the-art fuzzers missed (28 in GCC and 37 in LLVM). 60 of the discovered bugs were confirmed or fixed, demonstrating the approach's effectiveness.", "conclusion": "Bug histories provide valuable information for creating effective compiler fuzzing mutators, and mining these histories can significantly improve bug detection."}}
{"id": "2510.07941", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07941", "abs": "https://arxiv.org/abs/2510.07941", "authors": ["Srijita Basu", "Haraldsson Bengt", "Miroslaw Staron", "Christian Berger", "Jennifer Horkoff", "Magnus Almgren"], "title": "An AUTOSAR-Aligned Architectural Study of Vulnerabilities in Automotive SoC Software", "comment": "16 pages, 7 figures, 18th International Conference on the Quality of\n  Information and Communications Technology", "summary": "Cooperative, Connected and Automated Mobility (CCAM) are complex\ncyber-physical systems (CPS) that integrate computation, communication, and\ncontrol in safety-critical environments. At their core, System-on-Chip (SoC)\nplatforms consolidate processing units, communication interfaces, AI\naccelerators, and security modules into a single chip. AUTOSAR (AUTomotive Open\nSystem ARchitecture) standard was developed in the automotive domain to better\nmanage this complexity, defining layered software structures and interfaces to\nfacilitate reuse of HW/SW components. However, in practice, this integrated SoC\nsoftware architecture still poses security challenges, particularly in\nreal-time, safety-critical environments. Recent reports highlight a surge in\nSoC-related vulnerabilities, yet systematic analysis of their root causes and\nimpact within AUTOSAR-aligned architectures is lacking. This study fills that\ngap by analyzing 180 publicly reported automotive SoC vulnerabilities, mapped\nto a representative SoC software architecture model that is aligned with\nAUTOSAR principles for layered abstraction and service orientation. We identify\n16 root causes and 56 affected software modules, and examine mitigation delays\nacross Common Weakness Enumeration (CWE) categories and architectural layers.\nWe uncover dominant vulnerability patterns and critical modules with prolonged\npatch delays, and provide actionable insights for securing automotive CPS\nplatforms, including guides for improved detection, prioritization, and\nlocalization strategies for SoC software architectures in SoC-based vehicle\nplatforms.", "AI": {"tldr": "This paper systematically analyzes 180 automotive SoC vulnerabilities within AUTOSAR-aligned software architectures, uncovering main root causes, critical modules with delayed patches, and trends in vulnerability mitigation. The work offers specific recommendations to enhance security management in automotive cyber-physical systems.", "motivation": "CCAM systems are increasingly relying on complex SoC architectures in safety-critical environments. Despite standardized approaches like AUTOSAR, security challenges persist, particularly regarding SoC vulnerabilities. There is a lack of systematic root cause analysis and understanding of how these vulnerabilities affect AUTOSAR-aligned architectures.", "method": "The study analyzes 180 publicly reported automotive SoC vulnerabilities by mapping them to a representative SoC software architecture model that aligns with AUTOSAR layered abstraction and service orientation. The analysis involves identifying root causes, affected software modules, and measuring mitigation delays across CWE categories and architectural layers.", "result": "The study identifies 16 root causes and 56 affected software modules. It reveals dominant vulnerability patterns, critical modules with prolonged patch delays, and mitigation trends across software architectural layers and CWE categories.", "conclusion": "The research provides actionable security insights, including guides for improved detection, prioritization, and localization strategies specific to SoC-based vehicle platforms. These findings aim to address and reduce security risks in automotive CPS platforms, facilitating better protection and system reliability."}}
{"id": "2510.08005", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08005", "abs": "https://arxiv.org/abs/2510.08005", "authors": ["Utku Boran Torun", "Mehmet Taha Demircan", "Mahmut Furkan G\u00f6n", "Eray T\u00fcz\u00fcn"], "title": "Past, Present, and Future of Bug Tracking in the Generative AI Era", "comment": "Submitted to ACM TOSEM Special Issue: 2030 Software Engineering\n  Roadmap", "summary": "Traditional bug tracking systems rely heavily on manual reporting,\nreproduction, triaging, and resolution, each carried out by different\nstakeholders such as end users, customer support, developers, and testers. This\ndivision of responsibilities requires significant coordination and widens the\ncommunication gap between non-technical users and technical teams, slowing the\nprocess from bug discovery to resolution. Moreover, current systems are highly\nasynchronous; users often wait hours or days for a first response, delaying\nfixes and contributing to frustration. This paper examines the evolution of bug\ntracking, from early paper-based reporting to today's web-based and SaaS\nplatforms. Building on this trajectory, we propose an AI-powered bug tracking\nframework that augments existing tools with intelligent, large language model\n(LLM)-driven automation. Our framework addresses two main challenges: reducing\ntime-to-fix and minimizing human overhead. Users report issues in natural\nlanguage, while AI agents refine reports, attempt reproduction, and request\nmissing details. Reports are then classified, invalid ones resolved through\nno-code fixes, and valid ones localized and assigned to developers. LLMs also\ngenerate candidate patches, with human oversight ensuring correctness. By\nintegrating automation into each phase, our framework accelerates response\ntimes, improves collaboration, and strengthens software maintenance practices\nfor a more efficient, user-centric future.", "AI": {"tldr": "The paper introduces an AI-driven bug tracking framework that automates reporting, triaging, and fixing using LLMs, greatly reducing response times and manual effort for a faster and better bug resolution process.", "motivation": "Traditional bug tracking systems are slow due to manual processes, lack of coordination between different stakeholders, and a wide communication gap between technical and non-technical teams. These issues lead to delays and user frustration.", "method": "The paper proposes an AI-powered bug tracking framework using large language models (LLMs) to automate and augment the current bug tracking workflow. The framework enables natural language reporting, automated report refinement, reproduction attempts, classification, no-code fixes for invalid reports, automated bug localization, assignment to developers, and candidate patch generation, all with human oversight.", "result": "The framework reduces time-to-fix and human overhead by streamlining bug reporting and resolution processes. It integrates automation into every phase, leading to faster response times, improved collaboration, and more effective software maintenance.", "conclusion": "The proposed AI-powered bug tracking system addresses major pain points in traditional systems by leveraging LLMs for automation, thereby improving efficiency and making the system more user-centric."}}
{"id": "2510.08200", "categories": ["cs.SE", "68N15", "D.2.13"], "pdf": "https://arxiv.org/pdf/2510.08200", "abs": "https://arxiv.org/abs/2510.08200", "authors": ["Alexander Hellwig", "Nico Jansen", "Bernhard Rumpe"], "title": "Building Whitespace-Sensitive Languages Using Whitespace-Insensitive Components", "comment": "11 pages, 4 figures, 6 listings", "summary": "In Software Language Engineering, there is a trend towards reusability by\ncomposing modular language components. However, this reusability is severely\ninhibited by a gap in integrating whitespace-sensitive and\nwhitespace-insensitive languages. There is currently no consistent procedure\nfor seamlessly reusing such language components in both cases, such that\nlibraries often cannot be reused, and whitespacesensitive languages are\ndeveloped from scratch. This paper presents a technique for using modular,\nwhitespaceinsensitive language modules to construct whitespace sensitive\nlanguages by pre-processing language artifacts before parsing. The approach is\nevaluated by reconstructing a simplified version of the programming language\nPython. Our solution aims to increase the reusability of existing language\ncomponents to reduce development time and increase the overall quality of\nsoftware languages.", "AI": {"tldr": "The paper introduces a preprocessing technique to enable modular construction of whitespace-sensitive languages using reusable, whitespace-insensitive components, and validates it via a Python reconstruction case study, thereby enhancing software language engineering reusability.", "motivation": "There is a trend towards building software languages from reusable, modular components. However, integrating whitespace-sensitive and whitespace-insensitive languages remains challenging, limiting reusability and forcing developers to create whitespace-sensitive languages from scratch.", "method": "The paper proposes a technique to build whitespace-sensitive languages using modular, whitespace-insensitive language components by preprocessing artifacts before parsing.", "result": "The method is evaluated by re-constructing a simplified version of Python, demonstrating its effectiveness and robustness for the purpose.", "conclusion": "This approach allows existing language components to be reused more readily, reducing development time and improving the quality of software languages by closing the gap between whitespace-sensitive and whitespace-insensitive modular language construction."}}
